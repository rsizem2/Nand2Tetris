/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */

class Memory {

    static Array ram, heap;
    static int head, tail;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let head = heap;
        let tail = heap;
        let heap[0] = 14335;
        let heap[1] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int prev_addr, curr_addr, best_fit, best_prev;
        var int temp;
        var Array block;
        let prev_addr = head;
        let curr_addr = head;
        let best_fit = head;
        // check for block of needed size
        while (~(curr_addr = tail)){
            if (ram[curr_addr] = size + 1){
                // perfect fit found
                let best_fit = curr_addr;
                let best_prev = prev_addr;
                // force loop to exit
                let curr_addr = tail;
            } else {
                // if smaller block of adequate size found, update best_fit
                if ((ram[curr_addr] > size + 1) & (ram[curr_addr] > ram[best_fit])) {
                    let best_fit = curr_addr;
                    let best_prev = prev_addr;
                }
                let prev_addr = curr_addr;
                let curr_addr = heap[curr_addr];
            }
        }
        // temp - remainder of best_fit
        let temp = ram[best_fit] - (size + 1);
        // block - address of block to be returns
        let block = best_fit + (temp + 1);
        // linked list does not need to be altered
        if (temp > 0) {
            // update size
            let ram[best_fit] = temp;
            let block[-1] = size + 1;
            return block;
        // linked list needs to be altered
        } else {
            // head needs to be removed
            if (best_fit = head) {
                // change head
                let head = ram[best_fit + 1];
            } else {
                // tail needs to be removed
                if (best_fit = tail) {
                    let tail = best_prev;
                    let ram[best_prev + 1] = null;
                // middle element needs to be removed
                } else {
                    let ram[best_prev + 1] = ram[best_fit + 1];
                }
            }
            let block[-1] = size + 1;
            return block;
        }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
        var Array segment;
        let segment = obj - 1;
        let segment[0] = obj[-1];
        // add segment to the tail
        let ram[tail + 1] = segment;
        let tail = segment;
        return;
    }

    // Helper function, returns next block of memory in freelist
    function int next_block(int address){
        return heap[address+1];
    }

    function int block_size(int address){
        return heap[address];
    }
}

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */

class Screen {

    static boolean color;
    static int x_max, y_max;
    static Array PowerTwo;

    /** Initializes the Screen. */
    function void init() {
        var int index, num;
        let color = true;
        let x_max = 255;
        let y_max = 511;

        let PowerTwo = Array.new(16);
        let index = 0;
        let num = 1;
        while(index < 16){
            let PowerTwo[index] = num;
            let index = index + 1;
            let num = num + num;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = 16384;
        while (address < 24576) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        var int quot, rem;
        let quot = x / 16;
        let rem = x - (16* quot);
        let address = (32 * y) + quot;
        let value = Memory.peek(16384 + address);
        if (color) {
            // set bit
            let value = value | PowerTwo[rem];
        } else {
            // erase bit
            let value = value & (~PowerTwo[rem]);
        }
        do Memory.poke(16384 + address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;
        // vertical line
        if (x1 = x2){
            let x = x1;
            let y = Math.min(y1,y2);
            let dy = Math.abs(y1-y2);
            let b = 0;
            while (b < (dy + 1)) {
                do Screen.drawPixel(x,y+b);
                let b = b + 1;
            }
            return;
        }
        // horizontal line
        if (y1 = y2){
            let y = y1;
            let x = Math.min(x1,x2);
            let dx = Math.abs(x1-x2);
            let a = 0;
            while (a < (dx + 1)) {
                do Screen.drawPixel(x+a,y);
                let a = a + 1;
            }
            return;
        }
        // want x,y to be left-most point
        if (x1 < x2){
            let x = x1;
            let y = y1;
            let dx = x2 - x1;
            let dy = y2 - y1;
        } else {
            let x = x2;
            let y = y2;
            let dx = x1 - x2;
            let dy = y1 - y2;
        }
        // dy > 0 - positive slope
        if (dy > 0) {
            let a = 0;
            let b = 0;
            let diff = 0;
            while ((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x + a, y + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        // dy < 0 - negative slope
        else {
            let a = 0;
            let b = 0;
            let dy = -dy;
            let diff = 0;
            while ((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x + a, y - b);
                //
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dy, b;
        let dy = y2 - y1;
        let b = 0;
        while (b < (dy + 1)){
            do Screen.drawLine(x1,y1+b,x2,y1+b);
            let b = b+1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int adj, hyp, opp, r;
        let adj = 0;
        let hyp = r*r;
        while (adj < (r + 1)) {
            let opp = Math.sqrt(hyp - (adj * adj));
            do Screen.drawLine(x - opp, y + adj, x + opp, y + adj);
            do Screen.drawLine(x - opp, y - adj, x + opp, y - adj);
            let adj = adj + 1;
        }
        return;
    }
}

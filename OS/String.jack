/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

class String {

    field int len, max;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Sys.error(14);
        }
        if (maxLength = 0){
            let max = 0;
            let len = 0;
        } else {
            let chars = Array.new(maxLength);
            let max = maxLength;
            let len = 0;
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (max > 0){
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j < 0) | (j > (len - 1))) {
            do Sys.error(15);
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j < 0) | (j > (len - 1))) {
            do Sys.error(15);
        } else {
            let chars[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < max){
            let chars[len] = c;
            let len = len + 1;
        } else {
            do Sys.error(17);
        }
        return this;
    }

    method void append(char c){
        if (len < max){
            let chars[len] = c;
            let len = len + 1;
        }
        return;
    }

    method void erase(){
        let len = 0;
        return;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len = 0){
            do Sys.error(18);
        } else {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, index, digit, sign;
        let index = 0;
        if (chars[index] = 45) {
            let sign = -1;
            let index = index + 1;
        } else {
            let sign = 1;
        }
        while (index < len){
            let digit = chars[index] - 48;
            let value = (value * 10) + digit;
            let index = index + 1;
        }
        return sign * value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int q, r, value, index;
        var Array temp;
        if (max < 6) {
            do Sys.error(19);
            return ;
        } else {
            do erase();
            let temp = Array.new(5);
            let value = val;
            if (value < 0){
                do append(45);
                let value = - value;
            }
            let index = 0;
            while (value > 9) {
                let q = value / 10;
                let r = value - (q * 10);
                let temp[index] = r;
                let value = q;
                let index = index + 1;
            }
            let temp[index] = value;
            while ((index > 0) | (index = 0)) {
                do append(temp[index] + 48);
                let index = index - 1;
            }
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

}

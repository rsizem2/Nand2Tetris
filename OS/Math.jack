/**
* A library of commonly used mathematical functions.
* Note: Jack compilers implement multiplication and division using OS method calls.
*/

class Math {

    static Array PowerTwo;

    /** Initializes the library. */
    function void init() {
        var int index, num;

        let PowerTwo = Array.new(16);
        let index = 0;
        let num = 1;
        while(index < 16){
            let PowerTwo[index] = num;
            let index = index + 1;
            let num = num + num;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
                return -x;
            } else {
                return x;
            }
        }

    /** Returns the product of x and y.
    *  When a Jack compiler detects the multiplication operator '*' in the
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x*y and multiply(x,y) return the same value.
    */
    function int multiply(int x, int y) {
        var int j, sum, shifted_x;
        let sum = 0;
        let shifted_x = x;
        let j = 0;
        while(j < 16){
            if(Math.bit(y,j)){
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
    *  When a Jack compiler detects the multiplication operator '/' in the
    *  program's code, it handles it by invoking this method. In other words,
    *  the Jack expressions x/y and divide(x,y) return the same value.
    */

    function int divide(int x, int y){
        var int q;
        let q = Math.div(Math.abs(x),Math.abs(y));
        if ((x < 0 ) = (y < 0)) {
            return q;
        } else {
            return -q;
        }
    }

    function int div(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) { return 0;}
        let q = Math.div(x, y + y);
        if ((x - (2 * (q * y))) < y) {
            return q + q;
            } else {
            return (q+q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j;
        var int cond, next;
        let y = 0;
        let j = 8;
        while(j > 0){
            let next = y + PowerTwo[j-1];
            let cond = next * next;
            if (cond < 0) {
                // overflow
            } else {
                if ((cond < x) | (cond = x)){
                    let y = next;
                }
            }
            let j = j - 1;
        }
        return y;
    }

    // Helper function to compute powers
    function int pow(int x, int y){
        if (y = 0) {
            return 1;
        } else {
            return x * Math.pow(x,y-1);
        }
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        } else {
            return a;
        }
    }

    function boolean bit(int x, int j){
        if ((x & PowerTwo[j]) = 0){
            return false;
        } else {
            return true;
        }
    }
}
